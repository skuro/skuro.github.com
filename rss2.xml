<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title type="text" xml:lang="en">SKURO! -- Shading lights</title>
    <link type="application/atom+xml" href="http://skuro.tk/rss2/" rel="self"/>
    <link type="text" href="http://skuro.tk" rel="alternate"/>
    <updated>2012-10-14T17:09:21+02:00</updated>
    <id>http://skuro.tk</id>
    <author>
        <name>Carlo Sciolla</name>
    </author>
    <rights>Copyright (c) 2010-2011 Carlo Sciolla</rights>
    
<entry>
  <title>October Amsterdam Clojure 2012 is coming up!</title>
  <link href="http://skuro.tk/2012/10/14/october-amsterdam-clojure-coming-up/"/>
  <updated>2012-10-14T00:00:00+02:00</updated>
  <id>http://skuro.tk/2012/10/14/october-amsterdam-clojure-coming-up/</id>
  <summary type="html">&lt;p&gt;Saturday, October 27th. Less than two weeks. That's the time when
October Amsterdam Clojure, the biggest Clojure free event in the
Netherlands, will be up on stage. I'm so incredibly excited about it,
I can't wait to see all the seasoned clojurians, passionate
technologists and curious newbies meet together to discuss one of the
most intriguing technologies of our present day. Here's a couple of
things to remind you of what's ahead of us.&lt;/p&gt;

&lt;h1&gt;Don't forget to bring a ticket&lt;/h1&gt;

&lt;p&gt;As much as the event is totally free to attend, our limited logistics
imposes us a limit on the attendance. In order to reserve your seat at
the event, just go on the event
&lt;a href=&quot;http://bit.ly/octamsclj-register&quot;&gt;Meetup page&lt;/a&gt; and RSVP. This much,
and you'll be joining us and have full access to the conference.&lt;/p&gt;

&lt;h1&gt;How to reach us&lt;/h1&gt;

&lt;p&gt;As it goes with all Amsterdam Clojurians regular meetup, the big
October event will be also hosted by
&lt;a href=&quot;http://www.backbase.com&quot;&gt;Backbase&lt;/a&gt;. You can find the &lt;a href=&quot;http://www.backbase.com/contact/DIRECTIONS-backbase-INIT.pdf&quot;&gt;directions to
the venue&lt;/a&gt; on the official &lt;a href=&quot;http://amsclj.nl/october.html&quot;&gt;event page&lt;/a&gt;.
While it's not far from Central Station, make sure to take note of the
correct address. Once you're in the neighborhood, it's easy to find
us: just go to the main entrance of the big, glass building with the
huge newspapers logos on top. Yes,
&lt;a href=&quot;http://www.cctvinfo.com/news_images/Geutebruck_INIT_building_ext.gif&quot;&gt;that one&lt;/a&gt;.
You'll find some of our awesome Clojurian volunteer to wait for you
downstairs.&lt;/p&gt;

&lt;h1&gt;Afterparty drinkup&lt;/h1&gt;

&lt;p&gt;We're still in the process of organizing a drinkup right after the
event, make sure your agenda is free in order to join the swarm of
Clojure coders and discuss functional programming philosophies over a
couple of beers!&lt;/p&gt;

&lt;h1&gt;Stay up to date&lt;/h1&gt;

&lt;p&gt;Events are complex beasts, and we'll try hard to let you always be up
to date with any sudden change of the plan. If you want to double
check the official plan, here's where you can find all the info you
need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the official &lt;a href=&quot;http://bit.ly/octamsclj-register&quot;&gt;event page&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;#OctAmsClj at
 &lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/events/74036402/&quot;&gt;Meetup.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;our official social channels (&lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/events/74036402/&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;our official social channels (&lt;a href=&quot;https://twitter.com/amsclj&quot;&gt;Twitter&lt;/a&gt;,
(Facebook)[http://www.facebook.com/AmsterdamClojurians] and
&lt;a href=&quot;https://plus.google.com/107873826198867434419/about&quot;&gt;Google+&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Looking forward to meet you there!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>org4idea adds org-mode support to Intellij IDEA</title>
  <link href="http://skuro.tk/2012/09/08/org-mode-intellij-plugin/"/>
  <updated>2012-09-08T00:00:00+02:00</updated>
  <id>http://skuro.tk/2012/09/08/org-mode-intellij-plugin/</id>
  <summary type="html">&lt;p&gt;&lt;em&gt;tl;dr:&lt;/em&gt; &lt;a href=&quot;https://github.com/skuro/org4idea&quot;&gt;org4idea&lt;/a&gt; is a brand new
 project to add &lt;a href=&quot;http://orgmode.org&quot;&gt;org-mode&lt;/a&gt; support to &lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;A coin with two sides&lt;/h2&gt;

&lt;p&gt;Given the gargantuan size of the feature list of
&lt;a href=&quot;http://orgmode.org/&quot;&gt;org-mode&lt;/a&gt;, there's hardly any competition of
note taking systems for hackers. I'm completely sold on it since long
time already, so much that
&lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?uptime&quot;&gt;uptime(1)&lt;/a&gt; returns
always a quite precise approximation of the Emacs process lifetime.&lt;/p&gt;

&lt;p&gt;While such setup makes for a merry and seamless experience while
hacking on my &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; projects, the dream
breakes when I move to work on Java code, where I shall have no other
IDE besides &lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Baby steps&lt;/h2&gt;

&lt;p&gt;As there's no better way than a quick hacking session to start the
weekend, I eventually decided to take some time to put together a
minimal plugin to support editing org files within IntelliJ: a few
hours later &lt;a href=&quot;https://github.com/skuro/org4idea&quot;&gt;org4idea&lt;/a&gt; landed on my
GitHub account. It's a ridiculously tiny plugin at the moment, only
providing syntax highlight for comments and outlines.&lt;/p&gt;

&lt;p&gt;While I'm
not planning to support all the features and plugins of org in
IntelliJ you can safely bet I'll be adding new features with time. You
can always open an &lt;a href=&quot;https://github.com/skuro/org4idea/issues&quot;&gt;issue&lt;/a&gt;
to try to buy some karma points to that specific feature you desperately
need to be implemented (well, in such cases you could also realize you're just
one fork away).&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;While the plugin still awaits approval in the official
&lt;a href=&quot;http://plugins.intellij.net/plugin?pr=&amp;amp;pluginId=7095&quot;&gt;repository&lt;/a&gt; you
can manually install the plugin by downloading &lt;a href=&quot;https://github.com/downloads/skuro/org4idea/org4idea.jar&quot;&gt;org4idea.jar&lt;/a&gt;
and feed it to the &lt;em&gt;Settings -&gt; Plugins -&gt; Install plugin from disk&lt;/em&gt;
dialog.&lt;/p&gt;

&lt;p&gt;Happy GTD!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Slides from Dispatch in Clojure</title>
  <link href="http://skuro.tk/2012/08/31/dispatch-in-clojure-presentation-slides/"/>
  <updated>2012-08-31T00:00:00+02:00</updated>
  <id>http://skuro.tk/2012/08/31/dispatch-in-clojure-presentation-slides/</id>
  <summary type="html">&lt;h2&gt;Presentation slides&lt;/h2&gt;

&lt;p&gt;A bit late, and already announced
&lt;a href=&quot;https://twitter.com/skuro/status/233285542769487875&quot;&gt;elsewhere&lt;/a&gt;, but
here you can find the slides from the &lt;em&gt;Dispatch in Clojure&lt;/em&gt;
presentation I gave at the
&lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/events/73689122/&quot;&gt;August 2012 meetup&lt;/a&gt;
of the
&lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/&quot;&gt;Amsterdam Clojurians&lt;/a&gt;
group. Hopefully it will ease you bearing to wait for the &lt;a href=&quot;amsclj.nl/october.htm&quot;&gt;October
Amsterdam Clojure&lt;/a&gt; event later in October :-)&lt;/p&gt;

&lt;p&gt;The code samples I used in the presentation are available on &lt;a href=&quot;https://github.com/skuro/clj-dispatch&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/13915010&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px&quot; allowfullscreen&gt; &lt;/iframe&gt;


&lt;h2&gt;The story behind&lt;/h2&gt;

&lt;p&gt;In a previous meetup a discussion arose about
&lt;a href=&quot;http://clojure.org/protocols&quot;&gt;protocols&lt;/a&gt; and how they relate to
&lt;a href=&quot;http://en.wikipedia.org/wiki/Mixin&quot;&gt;mixins&lt;/a&gt; in other languages such
as &lt;a href=&quot;http://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;. A quick mention to virtual
methods dispatch table was enough to let my head spin around all the
details I was missing on low level Clojure mechanics. A presentation
was due.&lt;/p&gt;

&lt;h2&gt;What's in&lt;/h2&gt;

&lt;p&gt;What I was curious about, and eventually ended in the presentation, is
how Clojure implements function calls and method dispatch from both a
low level JVM and high level language syntax perspectives, and how
they relate to each other. What's (briefly) covered in the
presentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JVM bytecodes used for method call&lt;/li&gt;
&lt;li&gt;plain &lt;a href=&quot;http://clojure.org/functional_programming&quot;&gt;function call&lt;/a&gt; in Clojure&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clojure.org/multimethods&quot;&gt;multimethods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://clojure.org/Protocols&quot;&gt;protocols&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What couldn't be entered in the presentation is the interesting
digressions we had during the meetup using an open REPL, some sample
projects and a Java decompiler.&lt;/p&gt;

&lt;p&gt;Video recordings are still a pending TODO in the meetup list, so if
you're around Amsterdam make sure you come and &lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/&quot;&gt;join us&lt;/a&gt; for some other
awesome Dutch Clojure nights!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>H2 support updated to the latest Alfresco versions</title>
  <link href="http://skuro.tk/2012/06/27/h2-support-for-the-lates-alfresco-versions/"/>
  <updated>2012-06-27T00:00:00+02:00</updated>
  <id>http://skuro.tk/2012/06/27/h2-support-for-the-lates-alfresco-versions/</id>
  <summary type="html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; two new releases of &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support&quot;&gt;H2 Support&lt;/a&gt; are available, to support both Alfresco v4.0.1 and v4.0.2 Enterprise edition&lt;/p&gt;

&lt;p&gt;Time flies, and (good) software always keeps a fast development pace. This applies to &lt;a href=&quot;http://www.alfresco.com&quot;&gt;Alfresco&lt;/a&gt;, which released a couple of Enterprise versions since I last updated the &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support&quot;&gt;H2 Support&lt;/a&gt; module. Promptly, &lt;a href=&quot;https://twitter.com/#!/pjlucidi&quot;&gt;Piergiorgio Lucidi&lt;/a&gt; &lt;a href=&quot;http://code.google.com/p/maven-alfresco-archetypes/issues/detail?id=94&quot;&gt;found out&lt;/a&gt; that the latest H2 Support version was incompatible with Alfresco v4.0.2. Time for a new release.&lt;/p&gt;

&lt;h2&gt;Double rainbows&lt;/h2&gt;

&lt;p&gt;Last time I released H2 Support Alfresco was still on v4.0.0, with v4.0.1 and v4.0.2 already released in the meanwhile. The effort to upgrade H2 Support is fairly trivial, as it only requires some diff&amp;amp;merge of DB related configuration from the original Alfresco codebase to H2 Support sources. Hence, not one but &lt;strong&gt;two&lt;/strong&gt; releases of H2 Support were issued today, namely&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/tree/v1.4&quot;&gt;v1.4&lt;/a&gt; -- H2 Support for Alfresco v4.0.2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/tree/v1.3&quot;&gt;v1.3&lt;/a&gt; -- H2 Support for Alfresco v4.0.1&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As usual, please refer to the &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/wiki/H2-Database-support-for-Alfresco&quot;&gt;official documentation&lt;/a&gt; for matching H2 Support and Alfresco versions.&lt;/p&gt;

&lt;h2&gt;Availability on Central&lt;/h2&gt;

&lt;p&gt;The new releases are already available on OSS Sonatype &lt;a href=&quot;https://oss.sonatype.org/content/groups/public/tk/skuro/alfresco/h2-support/&quot;&gt;maven repository&lt;/a&gt;. Give it enough time and they'll end up in Maven Central.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Legacy artifacts repository update: going remote</title>
  <link href="http://skuro.tk/2012/05/28/legacy-artifacts-repository-update-going-remote/"/>
  <updated>2012-05-28T00:00:00+02:00</updated>
  <id>http://skuro.tk/2012/05/28/legacy-artifacts-repository-update-going-remote/</id>
  <summary type="html">&lt;h1&gt;The case against&lt;/h1&gt;

&lt;p&gt;After &lt;a href=&quot;http://skuro.tk/2012/05/14/legacy-libraries-for-your-maven-build/&quot;&gt;showing&lt;/a&gt; how to use your version control repository to host legacy libraries, &lt;a href=&quot;http://discursive.com/&quot;&gt;Tim O'Brien&lt;/a&gt; made a case against its use mentioning how a maintenance hell it would be to use such a strategy, and that a repository manager like &lt;a href=&quot;http://www.sonatype.org/nexus&quot;&gt;Nexus&lt;/a&gt; or &lt;a href=&quot;http://www.jfrog.com/index.php&quot;&gt;Artifactory&lt;/a&gt; is the preferred solution. After all, with a local repository in your sources you're indeed unable to &lt;strong&gt;download&lt;/strong&gt; the JAR, so that any dependent project wouldn't be able to compile against your transitive dependencies. Isn't it part of the maven revolution to never, ever check in your libraries in your VCS?&lt;/p&gt;

&lt;h1&gt;The case for&lt;/h1&gt;

&lt;p&gt;When your project has a mid-big scale, and you depend on a tens of legacy/funny libraries that the whole Internet can't provide, which are maybe still likely to get updates, you should &lt;del&gt;question your project&lt;/del&gt; take the chance to leverage a repository manager. But, if your project is relatively small, with just a bunch of stray dependencies and no access to a repository manager for any reason, there's little value to gain from building an infrastructure around your JARs, and you can easily leverage a piece of infrastructure you're most likely to have already: your remote or centralized VCS repository.&lt;/p&gt;

&lt;h1&gt;[Not only] Github&lt;/h1&gt;

&lt;p&gt;While &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; is my source hosting service of choice, and I'm sticking to it for the sake of my example, the strategy is not limited to it, and as long as you have plain HTTP access to your source files you can create such an integration. &lt;a href=&quot;http://code.google.com/p/maven-svn-wagon/wiki/MavenRepositoryInsideGoogleCode&quot;&gt;SVN on Google Code&lt;/a&gt; is just another option.&lt;/p&gt;

&lt;p&gt;That said, let's get to the juicy part. The main problem with a &lt;code&gt;file://&lt;/code&gt; based repository is that absolute URLs and locality of artifacts get in the way of other people leveraging your project, eventually breaking transitive dependencies access. The trick is then to just point to the remote location where your sources are already hosted and available, still exploiting the Maven repository layout. As already explained &lt;a href=&quot;http://cemerick.com/2010/08/24/hosting-maven-repos-on-github/&quot;&gt;elsewhere&lt;/a&gt;, here's the &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; definition to put in your POM in case you're on Github:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;repository&amp;gt;
    &amp;lt;id&amp;gt;repo&amp;lt;/id&amp;gt;
    &amp;lt;url&amp;gt;https://github.com/$USER/$PROJECT/raw/master/$PATH&amp;lt;/url&amp;gt;
&amp;lt;/repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where you have to replace &lt;code&gt;$USER&lt;/code&gt;, &lt;code&gt;$PROJECT&lt;/code&gt; and &lt;code&gt;$PATH&lt;/code&gt; with your Github username, your project name and the path to your maven repository root within your sources (e.g. &lt;code&gt;src/main/lib&lt;/code&gt; in the previous article).&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Legacy libraries for your maven build</title>
  <link href="http://skuro.tk/2012/05/14/legacy-libraries-for-your-maven-build/"/>
  <updated>2012-05-14T00:00:00+02:00</updated>
  <id>http://skuro.tk/2012/05/14/legacy-libraries-for-your-maven-build/</id>
  <summary type="html">&lt;h1&gt;Legacy libraries&lt;/h1&gt;

&lt;p&gt;Dealing with legacy code is always tricky, and adapting your tooling to leverage them is sometimes plain hard. Especially when you're building your projects with Maven and your code happens to depend on some ancient library which appear to be unknown to the Internet™, you probably have to figure out how to tell Maven where to find that damn library. This is also the problem when dealing with e.g. proprietary third party libraries which don't ship with a POM, therefore they don't mavenly exist.&lt;/p&gt;

&lt;h1&gt;Local repositories FTW&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; following the argument from &lt;a href=&quot;http://discursive.com/&quot;&gt;Tim O'Brien&lt;/a&gt;, I wrote a &lt;a href=&quot;http://skuro.tk/2012/05/28/legacy-artifacts-repository-update-going-remote/&quot;&gt;follow up&lt;/a&gt; to also exploit Github as a remote repository using the same storage strategy&lt;/p&gt;

&lt;p&gt;There are a number of possible solutions to the above mentioned problem, which ideally involve a shared, remote artifact repository where to deploy the JAR file that causes you headaches. Recently, I found myself in the need of creating (yet another) Maven build around some &lt;a href=&quot;http://www.alfresco.com&quot;&gt;Alfresco&lt;/a&gt;, to enable &lt;a href=&quot;http://skuro.tk/lambdalf/&quot;&gt;Lambdalf&lt;/a&gt; to build its Clojure sources. The rocky road to Maven for Alfresco is still long, and as a result you find yourself dealing with some iffy libraries when coding against Alfresco. Some examples, just opening up the WAR files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;truezip.jar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mybaties-3.0.4-patched.jar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;acegi-security-0.8.2_patched.jar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;One solution I found that doesn't require setting up your publicly available &lt;a href=&quot;http://www.sonatype.org/nexus/&quot;&gt;Nexus&lt;/a&gt; repository, nor using someone else's &lt;a href=&quot;http://www.jfrog.com/products.php&quot;&gt;Artifactory&lt;/a&gt;, is to provide the problematic JARs in a maven repository as part of your sources. Suppose you have a mysterious &lt;code&gt;fluff.jar&lt;/code&gt; library you need to include in your classpath, here's how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;place the JAR file in &lt;code&gt;src/main/lib/fluff/fluff/unknown/fluff-unknown.jar&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;setup the dependency in your POM:&lt;/p&gt;

&lt;p&gt;  &lt;dependencies&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;fluff&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;fluff&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;unknown&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  &lt;/dependencies&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;still in your POM, enable the local repository:&lt;/p&gt;

&lt;p&gt;  &lt;repositories&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;repository&amp;gt;
  &amp;lt;id&amp;gt;legacy-artifacts&amp;lt;/id&amp;gt;
  &amp;lt;url&amp;gt;file://${project.basedir}/src/main/lib&amp;lt;/url&amp;gt;
&amp;lt;/repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  &lt;/repositories&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Voil&amp;aacute;. You just created a local, portable repository in your sources and instructed Maven to look there for artifacts.&lt;/p&gt;

&lt;h1&gt;License&lt;/h1&gt;

&lt;p&gt;A couple of golden rules for all the cowboy programmers out there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;always, always, &lt;strong&gt;always check if the license allows you to redistribute the libraries&lt;/strong&gt; you're going to include in your project&lt;/li&gt;
&lt;li&gt;never, never, &lt;strong&gt;never distribute a piece of software you're not entitled to give away&lt;/strong&gt; and &lt;strong&gt;attach the license of all third party libraries&lt;/strong&gt; along with your project&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That said, I'll leave you to your local Maven repositories. Happy building!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Debug your build with the plan maven plugin</title>
  <link href="http://skuro.tk/2012/05/08/debug-your-build-with-the-plan-maven-plugin/"/>
  <updated>2012-05-08T00:00:00+02:00</updated>
  <id>http://skuro.tk/2012/05/08/debug-your-build-with-the-plan-maven-plugin/</id>
  <summary type="html">&lt;h1&gt;Contention over configuration&lt;/h1&gt;

&lt;p&gt;While &lt;a href=&quot;http://www.thoughtworks.com/&quot;&gt;ThoughtWorks&lt;/a&gt; put it &lt;a href=&quot;http://www.thoughtworks.com/sites/www.thoughtworks.com/files/images/52/radar-march-2012-tools.jpg&quot;&gt;on hold&lt;/a&gt;, there are still a number of occasions where a normal Java guy such as the truly yours have to face refactorings of ginormus Maven builds. In my company, for instance, I'm now in the situation where I need to speed up the build of one component whose project structure involves 27 POM files, with up to 4 levels of nesting. Needless to say, there are tens of plugin executions, plugins and all the possible Maven black magic you can think of. The default options for build introspection (help plugin, enable debug, etc.) left me helpless in the middle of a gargantuan build execution log file.&lt;/p&gt;

&lt;h1&gt;Plan plugin FTW&lt;/h1&gt;

&lt;p&gt;I ended up writing a small plugin to help me debugging the build by dumping the execution plan. I originally named it &lt;a href=&quot;http://plan-maven-plugin.skuro.tk&quot;&gt;&lt;code&gt;plan-maven-plugin&lt;/code&gt;&lt;/a&gt;, and put all the sources on &lt;a href=&quot;https://github.com/skuro/plan-maven-plugin&quot;&gt;github&lt;/a&gt;. As the plugin is already on &lt;a href=&quot;http://search.maven.org/#artifactdetails%7Ctk.skuro%7Cplan-maven-plugin%7C1.1%7Cmaven-plugin&quot;&gt;Maven Central&lt;/a&gt;, you only need to place the following in your &lt;code&gt;settings.xml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pluginGroups&amp;gt;
  &amp;lt;pluginGroup&amp;gt;tk.skuro&amp;lt;/pluginGroup&amp;gt;
&amp;lt;/pluginGroups&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/dthume&quot;&gt;David Thume&lt;/a&gt;, this is what it looks like now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mvn plan:plan -Dgoals=clean,javadoc:jar,sources:jar,package,gpg:sign
...
[INFO] --- plan-maven-plugin:1.1:plan (default-cli) @ plan-maven-plugin ---
[INFO] 
[INFO] Current lifecycle:
[INFO]     pre-clean
[INFO]     clean
[INFO]     post-clean
[INFO]     validate
[INFO]     initialize
[INFO]     generate-sources
[INFO]     process-sources
[INFO]     generate-resources
[INFO]     process-resources
[INFO]     compile
[INFO]     process-classes
[INFO]     generate-test-sources
[INFO]     process-test-sources
[INFO]     generate-test-resources
[INFO]     process-test-resources
[INFO]     test-compile
[INFO]     process-test-classes
[INFO]     test
[INFO]     prepare-package
[INFO]     package
[INFO]     pre-integration-test
[INFO]     integration-test
[INFO]     post-integration-test
[INFO]     verify
[INFO]     install
[INFO]     deploy
[INFO]     
[INFO] Execution plan:
[INFO]     [clean] org.apache.maven.plugins:maven-clean-plugin:clean (default-clean)
[INFO]     [-] org.apache.maven.plugins:maven-javadoc-plugin:jar (default-cli)
[INFO]     [-] org.apache.maven.plugins:maven-source-plugin:jar (default-cli)
[INFO]     [validate] org.apache.maven.plugins:maven-enforcer-plugin:enforce (enforce-maven)
[INFO]     [generate-resources] org.apache.maven.plugins:maven-plugin-plugin:descriptor (default-descriptor)
[INFO]     [process-resources] org.apache.maven.plugins:maven-resources-plugin:resources (default-resources)
[INFO]     [compile] org.apache.maven.plugins:maven-compiler-plugin:compile (default-compile)
[INFO]     [process-test-resources] org.apache.maven.plugins:maven-resources-plugin:testResources (default-testResources)
[INFO]     [test-compile] org.apache.maven.plugins:maven-compiler-plugin:testCompile (default-testCompile)
[INFO]     [test] org.apache.maven.plugins:maven-surefire-plugin:test (default-test)
[INFO]     [package] org.apache.maven.plugins:maven-jar-plugin:jar (default-jar)
[INFO]     [package] org.apache.maven.plugins:maven-plugin-plugin:addPluginArtifactMetadata (default-addPluginArtifactMetadata)
[INFO]     [-] org.apache.maven.plugins:maven-gpg-plugin:sign (default-cli)
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I still have a long way to go before I can bring my build to acceptable performance levels, but surely enough this will give me much more insights on what's possibly going wrong. Enjoy!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Spring surf Clojure and Alfresco H2 support now in Maven Central</title>
  <link href="http://skuro.tk/2012/03/06/spring-surf-clojure-and-alfresco-h2-support-now-in-maven-central/"/>
  <updated>2012-03-06T00:00:00+01:00</updated>
  <id>http://skuro.tk/2012/03/06/spring-surf-clojure-and-alfresco-h2-support-now-in-maven-central/</id>
  <summary type="html">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; I had to change the groupId of both
  &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support&quot;&gt;h2-support&lt;/a&gt; and
  &lt;a href=&quot;https://github.com/skuro/spring-webscripts-addon-clojure&quot;&gt;spring-webscripts-addon-clojure&lt;/a&gt;. Good
  news is, they're now available on Maven Central!&lt;/p&gt;

&lt;h2&gt;Build management dilemma&lt;/h2&gt;

&lt;p&gt;Part of &lt;a href=&quot;http://www.backbase.com&quot;&gt;my company&lt;/a&gt; offering is an Alfresco
based CMS, which we build the
&lt;a href=&quot;code.google.com/p/maven-alfresco-archetypes/&quot;&gt;maven way&lt;/a&gt;. While this
is already a nicely integrated build with the rest of the other
products, I currently find it annoying to require a database to be
installed wherever the project is built (ubiquitous MySQL installed
locally on my laptop, on the CI server, etc.). As I'm maintaining an
H2 &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support&quot;&gt;compatibility module&lt;/a&gt;
for Alfresco it's natural for me to integrate and use it.&lt;/p&gt;

&lt;p&gt;There was only one thing blocking this process, and that's the maven
repository where such artifact were deployed.&lt;/p&gt;

&lt;h2&gt;Deploy on Central&lt;/h2&gt;

&lt;p&gt;As much as I love &lt;a href=&quot;http://clojars.org&quot;&gt;Clojars&lt;/a&gt;, it still requires to be manually configured
when dealing with a pure Maven build. Since it's not quite an option to add
an artifacts repository for something as small as &lt;code&gt;h2-support&lt;/code&gt;, I
decided to just follow the guidelines for Maven Central sync on
&lt;a href=&quot;https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide&quot;&gt;OSS Sonatype&lt;/a&gt; and
rename the group ID to resabmle my personal web domain. This means I
did dirty, dirty things that bought me an entire eternity in hell,
such as retagging both
&lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/tree/v1.1&quot;&gt;v1.1&lt;/a&gt; and
&lt;a href=&quot;https://github.com/skuro/alfresco-h2-support/tree/v1.2&quot;&gt;v1.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But, as the only change in the POM is &quot;non functional&quot; such as
description, developers and such, it's not going to hurt much I
believe.&lt;/p&gt;

&lt;p&gt;This move is reflected also in the currently unreleased
&lt;code&gt;spring-webscripts-addon-clojure&lt;/code&gt;, so if you'll be using it or
you need &lt;code&gt;h2-support&lt;/code&gt; remember to use the &lt;code&gt;tk.skuro.*&lt;/code&gt; group IDs, and
you won't need to add a &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; to your POM ever again.&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;http://www.sonatype.com&quot;&gt;Sonatype&lt;/a&gt; for the awesome service!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>H2 support updated for Alfresco 4.x</title>
  <link href="http://skuro.tk/2011/12/14/h2-support-for-alfresco-4x/"/>
  <updated>2011-12-14T00:00:00+01:00</updated>
  <id>http://skuro.tk/2011/12/14/h2-support-for-alfresco-4x/</id>
  <summary type="html">&lt;h2&gt;H2 Support reloaded&lt;/h2&gt;

&lt;p&gt;Some time ago I &lt;a href=&quot;/2011/08/03/h2-embedded-db-and-alfresco-3-4/&quot;&gt;announced&lt;/a&gt; a &lt;a href=&quot;https://github.com/skuro/alfresco-h2-support&quot;&gt;module&lt;/a&gt; to enhance &lt;a href=&quot;http://www.alfresco.com&quot;&gt;Alfresco&lt;/a&gt; in order to support H2 as its persistent data storage. While it was successfully tested against Alfresco v3.4 and v3.5, &lt;a href=&quot;http://www.mindthegab.com&quot;&gt;@mindthegab&lt;/a&gt; pointed me out that Alfresco v4.x wasn't even starting when using the H2 module.&lt;/p&gt;

&lt;p&gt;A quick look at the PostgreSQL scripts and configuration of Alfresco 4 revealed that they were indeed radically changed in the new release, so that an update was necessary.&lt;/p&gt;

&lt;h2&gt;Matching versions&lt;/h2&gt;

&lt;p&gt;Since 3.4+ and 4.x version series have quite different configuration, you need to use a different version of the h2 module depending on the Alfresco version you're running, namely:&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;H2 module&lt;/th&gt;&lt;th&gt;Alfresco versions supported&lt;/th&gt;
    &lt;/tr&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1.1&lt;/td&gt;&lt;td&gt;3.4+&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.2&lt;/td&gt;&lt;td&gt;4.x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;The artifacts for both versions are available on &lt;a href=&quot;http://clojars.org&quot;&gt;clojars&lt;/a&gt;, please refer to the official documentation for the usage guide.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Jekyll, Github and Emacs</title>
  <link href="http://skuro.tk/2011/11/27/jekyll-github-and-emacs/"/>
  <updated>2011-11-27T00:00:00+01:00</updated>
  <id>http://skuro.tk/2011/11/27/jekyll-github-and-emacs/</id>
  <summary type="html">&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; I moved from Wordpress to &lt;a href=&quot;github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, you can now find the sources for this blog on &lt;a href=&quot;https://github.com/skuro/skuro.github.com&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It has been a great adventure to host my blog on a private machine for &lt;a href=&quot;http://skuro.tk/2009/10/20/home-sweet-home/&quot;&gt;more than two years&lt;/a&gt;. Setting up everything, in a pure DIY fashion, has been instructive and a funny journey. Unfortunately, there were a number of reasons why a privately hosted &lt;a href=&quot;http://wordpress.org&quot;&gt;Wordpress&lt;/a&gt; instance was not optimal anymore.&lt;/p&gt;

&lt;p&gt;I also gave the whole blog a new look, shamelessly copying much of &lt;a href=&quot;http://zachholman.com&quot;&gt;Zach Holman&lt;/a&gt; design, I think it greatly improves readibility. Feedback welcome!&lt;/p&gt;

&lt;h2&gt;Going down&lt;/h2&gt;

&lt;p&gt;It first happened at the beginning of this year that &lt;a href=&quot;http://skuro.tk/2011/01/24/performance-boost-in-clojure-1-3&quot;&gt;one of my posts&lt;/a&gt; attracted a good deal of attention. While it wasn't really that big thing, 2k requests/hour were enough to drain every bit of available memory my VPS had to offer, thus repeatedly killing my whole &lt;a href=&quot;http://en.wikipedia.org/wiki/LAMP_(software_bundle&quot;&gt;LAMP&lt;/a&gt;) system down. It has to be noted that I'm no PHP nor Wordpress expert, and I was also so sloppy to let every single &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;apache&lt;/a&gt; process (-&gt; request) suck up to a round 20MB. No wander my machine went down, and while I was able to finally handle 1k request/hour order of magnitude &lt;a href=&quot;http://skuro.tk/2011/09/04/clojure-makes-it-the-alfresco-devcon-2011-emea-london&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;http://skuro.tk/2011/09/27/october-amsterdam-clojure-with-uncle-bob&quot;&gt;times&lt;/a&gt; &lt;a href=&quot;http://skuro.tk/2011/11/10/slides-from-alfresco-the-clojure-way&quot;&gt;later&lt;/a&gt; on, it was everytime on the edge of the catastrophe. It was clear to me that my Wordpress blog was to be replaced.&lt;/p&gt;

&lt;p&gt;Note: I'm not saying LAMP + Wordpress is not a good option for a personal blog, it just wasn't an attractive option for me to get into the details of how to make it robust enough in my case.&lt;/p&gt;

&lt;h2&gt;Static content&lt;/h2&gt;

&lt;p&gt;PHP allows for highly dynamic content via server side rendering. Cool, but does a blog &lt;em&gt;really&lt;/em&gt; need such power? The reality is that most of the pages served by a blog are the same almost all the time.Apart from when you create a new post, there's hardly any difference in a page in its whole lifetime. All the &lt;a href=&quot;http://news.ycombinator.com/item?id=896744&quot;&gt;features&lt;/a&gt; you might get out of a blog engine such as Wordpress are in my case of no real use.&lt;/p&gt;

&lt;p&gt;Static content was appealing from a number of reasons: lightweight, plain HTML and resources (JS, CSS). The whole site fits in my mental picture quite easily. I needed only a thin layer that would allow me to use a more convenient interface to the presentation layer than HTML.&lt;/p&gt;

&lt;h2&gt;Github Pages and Jekyll&lt;/h2&gt;

&lt;p&gt;I did some initial experiments with a fully custom &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt; blog engine, where I explored various combinations of &lt;a href=&quot;https://github.com/weavejester/compojure/wiki&quot;&gt;Compojure&lt;/a&gt;, &lt;a href=&quot;http://webnoir.org/&quot;&gt;Noir&lt;/a&gt;, &lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup&lt;/a&gt;, &lt;a href=&quot;https://github.com/cgrand/enlive&quot;&gt;Enlive&lt;/a&gt;, etc. While it was a nice exercise, it was really more of a technical exercise which wasn't getting me nowhere, as I kept running in circles while picking up new technologies every other day. &lt;a href=&quot;http://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; was there, tempting me all along the way: I already loved &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; and &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;, and delegating the whole infrastructure to Github was eventually tackling the very core of my original issues with hosting my own blog. It was when I found a great &lt;a href=&quot;http://vitobotta.com/how-to-migrate-from-wordpress-to-jekyll/&quot;&gt;migration guide&lt;/a&gt; that I couldn't deny anymore Github hosted &lt;a href=&quot;github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt; was the best option I had.&lt;/p&gt;

&lt;h2&gt;Emacs, of course&lt;/h2&gt;

&lt;p&gt;Migrating to Jekyll took just a couple of days, I even wrote my first Ruby &lt;a href=&quot;https://github.com/skuro/skuro.github.com/blob/sources/_plugins/categories.rb&quot;&gt;code&lt;/a&gt; ever. Everything looked pretty promising, but I needed an extra step: there was no point in having a plain text interface if I couldn't use the &lt;a href=&quot;http://www.gnu.org/s/emacs/&quot;&gt;Almighty Emacs&amp;trade;&lt;/a&gt; editor as the main interface to my blog. Sure thing, I wasn't the first to think so, and I promptly found an &lt;a href=&quot;http://metajack.im/2009/01/02/manage-jekyll-from-emacs/&quot;&gt;initial implementation&lt;/a&gt; I could use to start walking the Emacs way.&lt;/p&gt;

&lt;p&gt;Needless to say, I'm writing this very post from Emacs. And it feels good.&lt;/p&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;With this first post I just started feeling the good parts of my new setup. There are huge areas of improvements here and there, but hey, for just a 4 days job I can't be more happy!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Maven 3 Cookbook reviewed</title>
  <link href="http://skuro.tk/2011/11/15/maven-3-cookbook-reviewed/"/>
  <updated>2011-11-15T00:00:00+01:00</updated>
  <id>http://skuro.tk/2011/11/15/maven-3-cookbook-reviewed/</id>
  <summary type="html">&lt;p&gt;Better late than ever, here you can find my review on the Packt
Publishing &lt;a href=&quot;http://www.google.nl/url?sa=t&amp;amp;rct=j&amp;amp;q=packt&amp;amp;source=web&amp;amp;cd=1&amp;amp;ved=0CCkQFjAA&amp;amp;url=http%3A%2F%2Fwww.packtpub.com%2F&amp;amp;ei=2VbCTq6qHsjs-gbEzZD_DQ&amp;amp;usg=AFQjCNE3QDtLQQneLEduZpKvWcyN8Bp3kg&amp;amp;sig2=AHMqZnDXQwCV5prbVMayGQ&quot;&gt;Apache Maven 3 Cookbook&lt;/a&gt; written by &lt;a href=&quot;http://srirangan.net/&quot;&gt;Srirangan&lt;/a&gt;. Let's see what it has to offer.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2&gt;The basics&lt;/h2&gt;

&lt;p&gt;The author aims to talk to Maven, and possibly &lt;span title=&quot;Application Lifecycle Management&quot;&gt;ALM&lt;/span&gt;, illiterates. This means the first step is to allow the reader to bootstrap his build infrastructure. This is one of the main Maven features, and the first chapters are easily leaping from nothing to a QA and TDD enabled build system. The book exploits Maven magic all the way there, and goes really fast to the target, no time for digressions on how, why or how does it compare with other build systems.&lt;/p&gt;

&lt;h2&gt;The ALM&lt;/h2&gt;

&lt;p&gt;Chapter 3 it's a bit off topic, even though it's probably for the greater good: it broadens the attention to ALM as a whole, all on open source products such as Hudson/Jenkins, SCM and a bit of agile. The topic is so huge that one single chapter cannot afford to cover it extensively, nor effectively: take it as an introduction to software lifecycle management, and dig somewhere else if you want more (and you definitely want). Chapter 4 indulges a bit more in QA and non functional build features, such as documentation and reporting. After all, the real mission of Maven &lt;strong&gt;is&lt;/strong&gt; ALM.&lt;/p&gt;

&lt;h2&gt;The Meat&lt;/h2&gt;

&lt;p&gt;Chapters 5 to 9 form the really juicy part of the book. I'm not going to rewrite the &lt;a href=&quot;http://www.packtpub.com/toc/apache-maven-3-cookbook-table-contents&quot;&gt;TOC&lt;/a&gt; here, but it's definitely a rich set of handy recipes that can either directly target common needs or provide inspirational snippets that will effectively help you writing your POM. Good marks for the attention to languages other than Java (but bad marks for forgetting &lt;a href=&quot;https://github.com/talios/clojure-maven-plugin&quot;&gt;Clojure&lt;/a&gt;!).&lt;/p&gt;

&lt;p&gt;These chapters offer much more value than the previous, as they're better aiming at developer needs. Still, focus could have been more towards existing Maven users, leaving the newbies to better learning paths.&lt;/p&gt;

&lt;h2&gt;Overall impression&lt;/h2&gt;

&lt;blockquote&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; If you are already a Maven literate, it's a book you probably want to have close to your keyboard. Just forget about the first three or four chapters.
&lt;/blockquote&gt;


&lt;p&gt;The book is an authentic source of good base recipes, that you would keep on your desk for quick reference of specific build tasks you need to implement (and your Google foo is weak). All the recipes are provided with a little description of what happens under the hood, so that you may use such knowledge to build upon them your more complex procedures. The whole focus on the book is on getting things done, with
lesser attention to fully understanding Maven: after all, a recipes book cannot replace a cooking course. As a result, its tutorial style of presenting recipes completely overlooks fundamental concepts such as plugins, executions and goals, with seldom sloppy terminology (&quot;archetype:generate&quot; is a goal, not a command). While it can be good to always have this book on your desk, if you're a Maven newbie it's highly recommended to look somewhere else to build up your knowledge.&lt;/p&gt;

&lt;h2&gt;Full disclosure&lt;/h2&gt;

&lt;p&gt;I was asked by Packt to provide this online review, for which I've been handed over a digital preview of the book.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Slides from Alfresco the Clojure way</title>
  <link href="http://skuro.tk/2011/11/10/slides-from-alfresco-the-clojure-way/"/>
  <updated>2011-11-10T00:00:00+01:00</updated>
  <id>http://skuro.tk/2011/11/10/slides-from-alfresco-the-clojure-way/</id>
  <summary type="html">&lt;p&gt;I just gave a talk at the Alfresco DevCon 2011 in London, and I published the slides at slideshare:&lt;/p&gt;

&lt;div style=&quot;width:425px; padding-left: 10%&quot; id=&quot;__ss_10104981&quot;&gt;
&lt;iframe src=&quot;http://www.slideshare.net/slideshow/embed_code/10104981&quot; width=&quot;425&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;There's also an &lt;a href=&quot;http://slidesha.re/uqUqOW&quot;&gt;extended version&lt;/a&gt; of the presentation that I originally wrote, which ended up being too big for the time slot I had.&lt;/p&gt;

&lt;p&gt;Hope you either enjoyed the talk or the slides, next steps are getting to &lt;a href=&quot;https://github.com/skuro&quot;&gt;GitHub&lt;/a&gt; and fork &lt;a href=&quot;https://github.com/skuro/lambdalf&quot;&gt;lambdalf&lt;/a&gt; and &lt;a href=&quot;https://github.com/skuro/spring-webscripts-addon-clojure&quot;&gt;clojure webscripts&lt;/a&gt; away!&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>October Amsterdam Clojure with Uncle Bob</title>
  <link href="http://skuro.tk/2011/09/27/october-amsterdam-clojure-with-uncle-bob/"/>
  <updated>2011-09-27T00:00:00+02:00</updated>
  <id>http://skuro.tk/2011/09/27/october-amsterdam-clojure-with-uncle-bob/</id>
  <summary type="html">&lt;p&gt;I'm very excited to announce that we have finalized the details, and
Wednesday, October 12th we're going to have a great &lt;a href=&quot;http://bit.ly/ams-clj&quot;&gt;Amsterdam Clojure meetup&lt;/a&gt;&quot;, with great talks and an awesome guest speaker: &lt;a href=&quot;http://twitter.com/#!/unclebobmartin&quot;&gt;&quot;Uncle&quot; Bob Martin&lt;/a&gt; from &lt;a href=&quot;http://www.objectmentor.com/&quot;&gt;Object Mentor&lt;/a&gt; and of &lt;a href=&quot;http://www.cleancoders.com/&quot;&gt;Clean Coders&lt;/a&gt; fame.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://www.sourcesense.com&quot;&gt;Sourcesense&lt;/a&gt;, which is once again backing up and ultimately allowing this event to happen in an awesome location such as the &lt;a href=&quot;http://www.dezwijger.nl/&quot;&gt;Pakhuis de Zwijger&lt;/a&gt;, I look forward to meet a number of Clojure enthusiast, newcomers or tired Java developers looking for something new.&lt;/p&gt;

&lt;p&gt;We have limited seating possibilities, so make sure to register at the &lt;a href=&quot;http://www.meetup.com/The-Amsterdam-Clojure-Meetup-Group/events/33351892/&quot;&gt;meetup official page&lt;/a&gt; to ensure there will be a spot for you!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bit.ly/ams-clj&quot;&gt;&lt;img src=&quot;http://download.skuro.tk/flyer.jpg&quot; alt=&quot;&amp;quot;Click to register&amp;quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Reviewing Maven 3 Cookbook from Packt Publishing</title>
  <link href="http://skuro.tk/2011/09/06/reviewing-maven-3-cookbook-from-packt-publishing/"/>
  <updated>2011-09-06T00:00:00+02:00</updated>
  <id>http://skuro.tk/2011/09/06/reviewing-maven-3-cookbook-from-packt-publishing/</id>
  <summary type="html">&lt;p&gt;Packt Publishing recently proposed me to review their new &lt;a href=&quot;http://www.packtpub.com/apache-maven-3-0-cookbook/book&quot;&gt;book&lt;/a&gt; &lt;em&gt;Maven 3 Cookbook&lt;/em&gt; written by &lt;a href=&quot;http://srirangan.net/&quot;&gt;Srirangan&lt;/a&gt;. I just received a copy of the book, I'll start reading it immediately and provide my review in a future blog post here.&lt;/p&gt;

&lt;p&gt;In the meanwhile, here's the book &lt;a href=&quot;http://www.packtpub.com/apache-maven-3-0-cookbook/book&quot;&gt;home page&lt;/a&gt; where to find the detailed &lt;a href=&quot;http://www.packtpub.com/toc/apache-maven-3-cookbook-table-contents&quot;&gt;table of contents&lt;/a&gt; and a sample chapter.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Clojure makes it to the Alfresco DevCon2011</title>
  <link href="http://skuro.tk/2011/09/04/clojure-makes-it-the-alfresco-devcon-2011-emea-london/"/>
  <updated>2011-09-04T00:00:00+02:00</updated>
  <id>http://skuro.tk/2011/09/04/clojure-makes-it-the-alfresco-devcon-2011-emea-london/</id>
  <summary type="html">&lt;p&gt;If you're a bit into Alfresco, you surerly know what the &lt;a href=&quot;http://www.amiando.com/alfresco-devcon-london-2011.html&quot;&gt;DevCon&lt;/a&gt; is.&lt;/p&gt;

&lt;p&gt;To use the same words from &lt;a href=&quot;http://blogs.alfresco.com/wp/devcon/2011/08/04/save-the-date-alfresco-devcon-san-diego-london/&quot;&gt;Jeff Potts&lt;/a&gt;:
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;the premier event for digging into the details of the Alfresco platform and collaborating with others who are doing the same&lt;/blockquote&gt;


&lt;p&gt;Now, as soon as I received the &lt;a href=&quot;http://ecmarchitect.com/archives/2011/08/09/1449&quot;&gt;CallForPapers&lt;/a&gt; I immediately (and impulsively!) submitted a talk named &lt;em&gt;Alfresco, the Clojure way&lt;/em&gt; in the Customizing Alfresco track, where I wanted to introduce to enthusiastic Alfresco developers how to do their job using a fantastic &lt;a href=&quot;http://clojure.org&quot;&gt;programming language&lt;/a&gt;. It was just last week that I was notified that yes, my talk made it to the conference schedule! Clojure goes to London!&lt;/p&gt;

&lt;p&gt;It will be great chance for Clojure to prove itself a great tool, and to get some more exposure to software professionals around Europe and beyond. Now that things got serious, I really need to put my presentation together, and that's where you can provide some help.&lt;/p&gt;

&lt;p&gt;I still don't know the time slot the presentation will be given, but surely enough I'll publish online the full version of it as soon as I'll be back from London. The following is the initial list of topics I'd like to cover, but I'm eager to know from you what you would like to add to it.&lt;/p&gt;

&lt;h2&gt;High level topics&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;crash-course on &lt;a href=&quot;http://clojure.org/reader&quot;&gt;Clojure syntax&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;extremely fast digression on some core language features and &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt; topics&lt;/li&gt;
    &lt;li&gt;introduction to &lt;a href=&quot;https://github.com/skuro/lambdalf&quot;&gt;lambdalf&lt;/a&gt;, a Clojure adapter to the Alfresco &lt;a href=&quot;http://wiki.alfresco.com/wiki/Java_Foundation_API&quot;&gt;Foundation API&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;introduction to the &lt;a href=&quot;https://github.com/skuro/spring-webscripts-addon-clojure&quot;&gt;Clojure addon&lt;/a&gt; for the Spring Web Script framework&lt;/li&gt;
    &lt;li&gt;show and tell: start Alfresco, start a &lt;a href=&quot;https://github.com/technomancy/swank-clojure&quot;&gt;swank&lt;/a&gt; server and do live coding against the repository&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;OPTIONAL:&lt;/em&gt; showcase a Clojure-based &lt;a href=&quot;https://github.com/skuro/lambdalf-samples&quot;&gt;sample&lt;/a&gt; Alfresco application&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Again, I don't know how much time I'll be given, so I can't even guarantee I'll have time for all the above topics to get a proper introduction, but since I also might have still enough time to cover other topics, what would you like to see in there?&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>H2 embedded DB and Alfresco 3.4</title>
  <link href="http://skuro.tk/2011/08/03/h2-embedded-db-and-alfresco-3-4/"/>
  <updated>2011-08-03T00:00:00+02:00</updated>
  <id>http://skuro.tk/2011/08/03/h2-embedded-db-and-alfresco-3-4/</id>
  <summary type="html">&lt;p&gt;One of the most useful thing an embedded DB can do for you is to provide a clean environment in your automated tests to use as a clean slate where to repeatedly and reliably test your code. It's been a while since Alfresco &lt;a href=&quot;http://issues.alfresco.com/jira/browse/ALFCOM-3691&quot;&gt;broke compatibility&lt;/a&gt; with some embedded DB we used to run our tests (&lt;a href=&quot;http://hsqldb.org/&quot;&gt;HSQLDB&lt;/a&gt; above all others).&lt;/p&gt;

&lt;p&gt;I recently regained interest into cutting out any useless dependency on MySQL or PostgreSQL on the test server to run my Alfresco tests, and H2 looked sexy. I found &lt;a href=&quot;http://www.codinginahurry.com/2010/11/27/running-alfresco-33-with-embedded-database-h2-in-postgresql-compability-mode/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://issues.alfresco.com/jira/browse/ALF-3537&quot;&gt;there&lt;/a&gt; some promising work by other people, but none worked for me out of the box. I then started from scratch using PostgreSQL DB scripts and voila! Now I have back my Alfresco running against an embeddable DB! You can see &amp;amp; fork &lt;a href=&quot;http://bit.ly/nIJuLY&quot;&gt;the results&lt;/a&gt; of my job if you like. It's supposed to help you with a Maven Alfresco project, but you can probably benefit from it even if you're using some other build tools.&lt;/p&gt;

&lt;p&gt;As soon as you have all those files in your classpath, be sure you edit your &lt;em&gt;alfresco-global.properties&lt;/em&gt; like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.driver=org.h2.Driver
db.url=jdbc:h2:alf_data/h2_data/alfresco
db.username=alfresco
db.password=alfresco
hibernate.dialect=org.hibernate.dialect.H2Dialect
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure you're using an hibernate version &amp;gt;= 3.1 as per H2 &lt;a href=&quot;http://www.h2database.com/html/tutorial.html#using_hibernate&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Verifying my Technorati claim</title>
  <link href="http://skuro.tk/2011/05/11/verifying-my-technorati-claim/"/>
  <updated>2011-05-11T00:00:00+02:00</updated>
  <id>http://skuro.tk/2011/05/11/verifying-my-technorati-claim/</id>
  <summary type="html">&lt;p&gt;You can safely ignore this entry, as it's only to comply to &lt;a href=&quot;http://technorati.com/&quot;&gt;technorati&lt;/a&gt; request to add a random code in a blog post to validate it.&lt;/p&gt;

&lt;p&gt;I placed the code in this page, can you spot it?&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: #ffffff;&quot;&gt; UVBRKNJTRFH7&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>More Clojure for Spring Surf</title>
  <link href="http://skuro.tk/2011/05/10/more-clojure-for-spring-surf/"/>
  <updated>2011-05-10T00:00:00+02:00</updated>
  <id>http://skuro.tk/2011/05/10/more-clojure-for-spring-surf/</id>
  <summary type="html">&lt;p&gt;After some time from my &lt;a href=&quot;http://www.skuro.tk/2010/05/23/spring-surf-meets-clojure&quot;&gt;initial announcement&lt;/a&gt;, I've started again working on my &lt;a href=&quot;https://github.com/skuro/spring-webscripts-addon-clojure&quot;&gt;Clojure addon for Spring Surf&lt;/a&gt;. While it's still a rudimentary piece of glue code, it's now getting better and better, so much that I decided it's good enough now to release an alpha version on &lt;a href=&quot;http://clojars.org/it.sk.spring.surf.clojure/spring-webscripts-addon-clojure&quot;&gt;clojars&lt;/a&gt;. Here's what this library currently provides:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;a &lt;a href=&quot;https://github.com/skuro/spring-webscripts-addon-clojure/blob/master/src/main/java/org/springframework/extensions/webscripts/processor/ClojureScriptProcessor.java&quot;&gt;ScriptProcessor&lt;/a&gt; that allows webscript controllers to be written in Clojure&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/skuro/spring-webscripts-addon-clojure/blob/master/src/main/clojure/spring/surf/webscript.clj&quot;&gt;a &lt;em&gt;WebScript&lt;/em&gt; protocol and some utility functions&lt;/a&gt; to ease development of your own web scripts&lt;/li&gt;
    &lt;li&gt;enough &lt;a href=&quot;https://github.com/skuro/spring-webscripts-addon-clojure/tree/master/src/main/resources/org/springframework/extensions/clj/webscripts&quot;&gt;spring configuration&lt;/a&gt; to enable this addon just by importing the provided contextes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The approach is indeed easy and hopefully straightforward: the idea is to have your WebScript clojure controllers return an instance of a concrete implementation of the WebScript protocol, which will implement the &lt;em&gt;run&lt;/em&gt; method the way you like.&lt;/p&gt;

&lt;p&gt;Here's the sample code from a &lt;a href=&quot;https://gist.github.com/965008&quot;&gt;gist&lt;/a&gt; you might want to have a look at to better understand how to use this library:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/965008.js?file=sample.get.clj&quot;&gt;&lt;/script&gt;


&lt;p&gt;You can also find other samples in the project &lt;a href=&quot;https://github.com/skuro/spring-webscripts-addon-clojure/tree/master/src/test/resources/webscripts/test&quot;&gt;tests&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The next episode will be about &lt;a href=&quot;https://github.com/skuro/lambdalf&quot;&gt;&lt;em&gt;lambdalf&lt;/em&gt;&lt;/a&gt;, an Alfresco AMP I've been initially developing to prove the Clojure surf addon works fine, but that is now growing to be a full blown project by itself: a Clojure API for Alfresco!&lt;/p&gt;

&lt;p&gt;Stay tuned. &lt;span style=&quot;color: #ffffff;&quot;&gt;UVBRKNJTRFH7&lt;/span&gt;&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>Performance boost in Clojure 1.3 (alpha4)</title>
  <link href="http://skuro.tk/2011/01/24/performance-boost-in-clojure-1-3/"/>
  <updated>2011-01-24T00:00:00+01:00</updated>
  <id>http://skuro.tk/2011/01/24/performance-boost-in-clojure-1-3/</id>
  <summary type="html">&lt;p&gt;As release 1.3 of Clojure is &lt;a href=&quot;http://www.assembla.com/spaces/clojure/milestones/238781-release-next&quot;&gt;on its way&lt;/a&gt;, I decided to give the currently available alpha4 a try and see some of the good stuff it brings. First thing first, I wanted to experiment myself with the performance gain that the extended support for native types would bring. I ran into an old &lt;a title=&quot;old post, but inspirational&quot; href=&quot;http://hughw.blogspot.com/2009/01/clojure-vs-javafx-script-only-5x-slower.html&quot;&gt;post&lt;/a&gt; from which I got the inspiration for the specific test to run: the &lt;a title=&quot;Takeuchi function on Wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Tak_(function)&quot;&gt;Takeuchi function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-340&quot; title=&quot;Full disclosure: I own a Triumph Street Triple and I love Clojure&quot; src=&quot;/img/post/clj-triple.jpg&quot; alt=&quot;Full disclosure: I own a Triumph Street Triple and I love Clojure&quot; width=&quot;375&quot; height=&quot;322&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Java implementation for Tak provided me with a bottom line for performance comparison:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/788834.js?file=Tak.java&quot;&gt;&lt;/script&gt;


&lt;p&gt; Then I used the Clojure version provided in the original blog post run to test against Clojure 1.2: &lt;script src=&quot;https://gist.github.com/788834.js?file=tak2.clj&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Finally, I leveraged the new syntax for the &lt;a href=&quot;http://dev.clojure.org/display/doc/Enhanced+Primitive+Support&quot;&gt;enhanced primitives support&lt;/a&gt; to test against Clojure 1.3 (thanks to &lt;a href=&quot;http://twitter.com/neotyk&quot;&gt;neotyk&lt;/a&gt; to point that out to me):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/788834.js?file=tak.clj&quot;&gt;&lt;/script&gt;


&lt;p&gt;As you can see, timing is tracked from the application code, as various accessory overhead like JVM and Clojure runtime bootstrap are not in the scope of this post.&lt;/p&gt;

&lt;p&gt;As this benchmark is &quot;just for fun&quot;, I won't pretent I did an extensive benchmark, or that I engineered a bullet proof benchmark strategy and the like. I just ran the above code some tens of times and here follows the average running time for the three versions:&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;NOTE: an updated benchmark is provided down below&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;NOTE2: to have a more fair performance comparison, &lt;a href=&quot;#reloaded&quot;&gt;keep reading&lt;/a&gt;&lt;/span&gt;
&lt;img class=&quot;aligncenter size-full wp-image-344&quot; title=&quot;Benchmark results&quot; src=&quot;http://www.skuro.tk/wp-content/uploads/2011/01/clj-bench-graph.png&quot; alt=&quot;Average running time in ms&quot; width=&quot;467&quot; height=&quot;292&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The results tells of a &lt;strong&gt;~4.5x&lt;/strong&gt; speed gain, &lt;del datetime=&quot;2011-01-26T09:59:07+00:00&quot;&gt;getting close to match plain Java code performance&lt;/del&gt;.&lt;/p&gt;

&lt;p&gt;Now, even if such a benchmark won't be any news to the Clojure community, it's still &lt;strong&gt;absolutely awesome&lt;/strong&gt; to see such a performance gain in the next release of this beautiful Lispy language :-)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: &lt;/strong&gt;following the advice by &lt;strong&gt;Jürgen Hötzel&lt;/strong&gt; in his comment, I slightly modified my Clojure sources to change &lt;span style=&quot;font-family: monospace;&quot;&gt;&lt;a href=&quot;http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/-&quot;&gt;clojure.core/-&lt;/a&gt;&lt;/span&gt; with &lt;span style=&quot;font-family: monospace;&quot;&gt;&lt;a href=&quot;http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/unchecked-subtract&quot;&gt;clojure.core/unchecked-subtract&lt;/a&gt;&lt;/span&gt; and re-run the test. Here's the final results, which are way better for Clojure, especially for version 1.2:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;aligncenter size-full wp-image-350&quot; title=&quot;clj-bench-graph-unchecked&quot; src=&quot;http://www.skuro.tk/wp-content/uploads/2011/01/clj-bench-graph-unchecked.png&quot; alt=&quot;&quot; width=&quot;493&quot; height=&quot;302&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2:&lt;/strong&gt; the following graph shows the impact of the direct use of the &lt;span style=&quot;font-family: monospace;&quot;&gt;recur&lt;/span&gt; special form tested against plain recursive invocation of Tak, as per requested in some comments
&lt;img class=&quot;aligncenter size-full wp-image-353&quot; title=&quot;clj-bench-graph-norecur&quot; src=&quot;http://www.skuro.tk/wp-content/uploads/2011/01/clj-bench-graph-norecur.png&quot; alt=&quot;&quot; width=&quot;476&quot; height=&quot;267&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 3:&lt;a name=&quot;reloaded&quot;&gt;&lt;/a&gt;&lt;/strong&gt; even if this all started as a quick&amp;amp;dirty, amatorial benchmark, it attracted quite some &lt;a href=&quot;http://news.ycombinator.com/item?id=2134950&quot;&gt;attentions&lt;/a&gt;, demanding more fair and precise benchmarks, especially on the Java vs Clojure comparison. As in the Java version of Tak I used Integers and not primitive types, there is an unfair burden Java had to carry along the computation. The following is the result of a re-run of the test for Java (using primitive &lt;span style=&quot;font-family: monospace;&quot;&gt;long&lt;/span&gt;) and Clojure 1.3:
&lt;img class=&quot;aligncenter size-full wp-image-356&quot; title=&quot;clj-bench-reloaded&quot; src=&quot;http://www.skuro.tk/wp-content/uploads/2011/01/clj-bench-reloaded.png&quot; alt=&quot;&quot; width=&quot;463&quot; height=&quot;272&quot; /&gt;&lt;/p&gt;
</summary>
</entry>


<entry>
  <title>SproutCore encoding gotchas</title>
  <link href="http://skuro.tk/2010/09/30/sproutcore-encoding-gotchas/"/>
  <updated>2010-09-30T00:00:00+02:00</updated>
  <id>http://skuro.tk/2010/09/30/sproutcore-encoding-gotchas/</id>
  <summary type="html">&lt;p&gt;These days I'm trying out &lt;a title=&quot;Sproutcore homepage&quot; href=&quot;http://www.sproutcore.com/&quot;&gt;SproutCore&lt;/a&gt;, an MVC framework written in Javascript that aims to help developing rich client web applications. I'm not going to entertain you with any juicy technical spotlight, as they'll hopefully find their way in these pages later on with plenty of details. At the moment I'd like to share a little problem I got stuck with that had a non trivial solution&lt;del datetime=&quot;2010-09-28T20:03:47+00:00&quot;&gt;,  at least for the noob I am&lt;/del&gt;.&lt;/p&gt;

&lt;p&gt;First thing you have to know is that SproutCore ships with both a rich &lt;a title=&quot;SproutCore source code&quot; href=&quot;http://github.com/sproutcore/sproutcore&quot;&gt;Javascript library&lt;/a&gt; and a set of building tools written in ruby, which go under the code name of &lt;a title=&quot;Abbot source code&quot; href=&quot;http://github.com/sproutcore/abbot&quot;&gt;abbot&lt;/a&gt;. New projects kickstart, &lt;a title=&quot;sc-gen&quot; href=&quot;http://wiki.sproutcore.com/Abbot+Spec+sc-gen&quot;&gt;scaffolding&lt;/a&gt;, &lt;a title=&quot;sc-docs&quot; href=&quot;http://blog.sproutcore.com/post/150789672/now-available-sproutcore-1-0-reference-docs&quot;&gt;automatic documentation&lt;/a&gt; are among the features that abbot provides you with, along with the ability to &lt;a title=&quot;sc-server&quot; href=&quot;http://wiki.sproutcore.com/BuildTools-Reference+sc-server&quot;&gt;run you application&lt;/a&gt; on a local web server during development. Sounds cool, isn't it? And I didn't even mention it's integrated &lt;a title=&quot;unit tests&quot; href=&quot;http://wiki.sproutcore.com/UnitTesting-Introduction&quot;&gt;unit testing&lt;/a&gt; facility!&lt;/p&gt;

&lt;p&gt;I immediately tried to give it a shot, and ran through &lt;a title=&quot;Todos tutorial&quot; href=&quot;http://wiki.sproutcore.com/Todos%C2%A0Intro&quot;&gt;one of the tutorials&lt;/a&gt; to write down my first HelloWorld. The first pieces got into place, and after the first quick round I left my hello world project in such a state that I already decided to build a simple but complete application right away. How arrogant.&lt;/p&gt;

&lt;p&gt;The second day something Bad™ happened, I cannot really tell what, but &lt;a title=&quot;#fail&quot; href=&quot;http://gist.github.com/597780&quot;&gt;everything&lt;/a&gt; started &lt;a title=&quot;#fail&quot; href=&quot;https://gist.github.com/f2a107a3a0a2cd49e4e5&quot;&gt;to fall apart&lt;/a&gt;: no one tool in the abbot suite worked properly, I was no more able to get any further and I started a painful journey of which I only remember installing and changing between zillions of ruby versions, crying and considering to give up with IT and to start my own religion to make a living.&lt;/p&gt;

&lt;p&gt;But then I simply resorted to the #sproutcore IRC channel and I got the tip that saved the day (thanks &lt;a title=&quot;my saviour&quot; href=&quot;http://www.flashesofpanic.com/&quot;&gt;pjmorse&lt;/a&gt;!):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export LC_CTYPE=UTF-8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&quot;Boom baby!&quot; I said, everything got back to normality. I can save my holy plans for a rainy day. It seems that encoding is an &lt;a title=&quot;#fail&quot; href=&quot;http://www.taylorluk.com/2009/08/ruby-19-encoding-gotcha-retreat-to-ascii-8bit&quot;&gt;endless&lt;/a&gt;&lt;a title=&quot;#fail&quot; href=&quot;http://gnuu.org/2009/11/02/ruby-1-9-encoding-issues-again/&quot;&gt; source&lt;/a&gt; of &lt;a title=&quot;#fail&quot; href=&quot;http://stackoverflow.com/questions/3597255/why-does-my-sproutcore-development-server-drop-connections-with-invalid-byte-seq&quot;&gt;issues&lt;/a&gt; in the ruby world, so that probably if you have any ruby knowledge whatsoever this all rant might just seem pointless and the solution trivial.&lt;/p&gt;

&lt;p&gt;Next episode on SproutCore (if everything goes well): a sample SproutCore + Clojure application. See you there!&lt;/p&gt;
</summary>
</entry>



</feed>
